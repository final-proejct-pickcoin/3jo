##### 배포할 때는 fastapi, react, spring 모두 volumes 제거 / react에서 NODE_ENV=production으로 변경
services:
  fastapi-app:
    build: ./fastapi-app
    # volumes:
    #   - ./fastapi-app:/app
    #   - ./key/pickcoin-687a99cb3128.json:/app/secrets/pickcoin-687a99cb3128.json
    ports:
      - "8000:8000"
    # 환경변수에 DB 접속 정보 지정(아래 예시 참고)
    environment:
      - MYSQL_HOST=34.47.81.41
      - MYSQL_USER=pickcoin
      - MYSQL_PASSWORD=Admin1234!
      - MYSQL_DATABASE=coindb
      - REDIS_HOST=redis
      - KIBANA_URL=http://kibana:5601
      - ES_ENABLED=1
      - ES_MAX_WAIT=120
      - ES_WAIT_INTERVAL=3
    depends_on:
      - redis
      - elasticsearch
      - kibana
      - spring-app
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    networks:
    - elastic-net

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    restart: always
    volumes:
      - ./redis_data:/data
    networks:
    - elastic-net

  spring-app:
    build:
      #이미지빌드 할 폴더위치 설정
      context: ./spring-app
      #도커파일 설정
      dockerfile: Dockerfile.dev
    # volumes:
    #   - ./spring-app:/home/gradle/app
    container_name: spring-app
    ports:
      - "8080:8080"
    env_file:
      - ./.env
    environment:
      #Docker에게 volume으로 연결된 폴더의 변경 사항을 적극적으로 감시명령 (dev-tools의존성)
      # - SPRING_DEVTOOLS_WATCH_ADDITIONAL_PATHS=/home/gradle/app
      - SPRING_PROFILES_ACTIVE=default
      - SPRING_MAIL_HOST=smtp.gmail.com
      - SPRING_MAIL_PORT=587
      - SPRING_MAIL_USERNAME=jeesoo1899@gmail.com
      - SPRING_MAIL_PASSWORD=yqpmfomkytgtokpm
      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH=true
      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE=true
      - MYSQL_HOST=34.47.81.41
      - MYSQL_USER=pickcoin
      - MYSQL_PASSWORD=Admin1234!
      - MYSQL_DATABASE=coindb
      # 아래 base_url은 배포시 수정
      - APP_BASE_URL=http://34.47.79.222:8080
    depends_on:
      - redis
      - elasticsearch
    command: ./gradlew bootRun
    networks:
    - elastic-net

  react-app:
    build: ./react-app
    # volumes:
    #   - ./react-app:/app
    #   - /app/node_modules
    container_name: react-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=true
    depends_on:
      - fastapi-app
    command: ["pnpm", "dev"]
    networks:
    - elastic-net
    

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10
    ports:
      - 9200:9200
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      # - xpack.security.enrollment.enabled=false
      - xpack.security.http.ssl.enabled=false
    volumes:
      - ./elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://34.47.79.222:9200/ > /dev/null || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 30  
    networks:
      - elastic-net
      
  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.10
    ports:
      - 5044:5044
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    volumes:
      - ./logstash:/usr/share/logstash/pipeline
    depends_on:
      - elasticsearch
    networks:
      - elastic-net
  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.10
    ports:
      - 5601:5601
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
      # - xpack.security.enrollment.enabled=false
      - xpack.security.http.ssl.enabled=false
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://34.47.79.222:5601/api/status > /dev/null || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 30
    networks:
      - elastic-net
  
volumes:
  elasticsearch_data:

networks:
  elastic-net:
    driver: bridge